class Main
{
    // A combination between symbolic array and symbolic index.
    static void foo(int[] a, int i, int k)
        requires(a != null && #a > 2 && 0 <= i && i < #a && 0 <= k && k < #a && (forall elem, index : a : elem > 0))
    {
        a[0] := 1;
        int iValue := a[i];
        a[1] := iValue - 1;
        
        int value := a[k];
        assert value >= 0;
    }
    
    // A Bubblesort algorithm.
    static int[] sort(int[] array)
        requires(array != null)
        ensures(forall v, i : retval : forall w, j : retval : i < j ==> v <= w)
        exceptional(false)
    {
        bool sorted := false;
        while (!sorted) {
            sorted := true;
            int i := 1;
            while (i < #array) {
                int a := array[i];
                int b := array[i - 1];
                if (a < b) {
                    array[i] := b;
                    array[i - 1] := a;
                    sorted := false;
                }
                i := i + 1;
            }
        }
        return array;
    }
    
    // Find the maximum element in the array.
    static int max(int[] array)
        requires(array != null)
        ensures(forall v, i : array : retval >= v)
        exceptional(false)
    {
        int i := 1;
        int max := array[0];
        while (i < #array) {
            int elem := array[i];
            if (elem > max) {
                max := elem;
            }
            i := i + 1;
        }
        return max;
    }
}