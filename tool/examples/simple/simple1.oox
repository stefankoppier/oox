//
// A test class containing a bunch of static methods to test against.
//

class Item {
    int x ;
    Item(int y) {
       this.x := y ;
    }
    void set(int xx) {
       this.x := xx ;
    }
}

class SomeClass
{
    // valid
    static int m1(int x, int y)
        requires(x > y)
    {
        if (x==y) assert false ;
        if (x<y)  assert false ;
        assert x>y ;
        return x ;
    }

    // not valid
    static int m1Invalid(int x, int y)
        requires(x > y)
    {
        if (x==y) assert false ;
        if (x<y)  assert false ;
        assert x<=y ; // error
        return x ;
    }

    // valid
    static void m2(int x, int y)
        requires(x > y)
    {
        while(x>y) {
           if(x<=y) { x := x+1 ; }
           else     x := x-1 ;
           assert x>=y ;
        }
        assert x==y ;
    }

    // invalid
    static void m2Invalid(int x, int y)
        requires(x > y)
    {
        while(x>y) {
           if(x<=y) { x := x+1 ; }
           else     x := x-1 ;
           assert x>=y ;
        }
        assert x<y ; // error
    }

    // valid
    static void m3(int[] a, int x)
        requires(a != null && #a > 0 && x<=0 && (forall elem, index : a : elem > 0))
    {
        int k := 0 ;
        bool found := false ;
        while (k < #a) {
            int y := a[k] ;
            if(y == x) found := true ;
            k := k+1 ;
        }
        assert !found ;
    }

    // valid
    static void m3Invalid(int[] a, int x)
        requires(a != null && #a > 0 && x<=0 && (forall elem, index : a : elem > 0))
    {
        int k := 0 ;
        bool found := false ;
        while (k < #a) {
            int y := a[k] ;
            if(y == x) found := true ;
            k := k+1 ;
        }
        assert false ;
        if(k>4)
          // error ; but setting the condition to k>3
          // would require --symbolic-array-size 4 to be
          // found
          assert found ;
    }

    // valid
    static void m4(int[] a, int[] b)
        requires(a!=null && #a>1 && b!=null && #b>0)
    {
        int k := 1 ;
        a[k] := 99 ;
        if(a==b) {
            int y := b[k] ;
            assert y == 99 ;
        }
    }

    // invalid
    static void m4Invalid(int[] a, int[] b)
        requires(a!=null && #a>1 && b!=null && #b>0)
    {
        int k := 1 ;
        a[k] := 99 ;
        if(#b>0) {
            int y := b[k] ;
            assert y == 99 ;
        }
    }

    // valid
    static void m5(Item o, Item p)
        requires(o!=null && p!=null)
    {
        int x := o.x ;
        int y := p.x ;
        if(o==p) {
            assert x==y ;
        }
    }

    // invalid
    static void m5Invalid(Item o, Item p)
        requires(o!=null && p!=null)
    {
        int x := o.x ;
        int y := p.x ;
        if(o==p) {
            assert x==y ;
        }
        else {
           assert x==y ; // error
        }
    }

    // valid
    static void m6(Item o, Item p)
        requires(o!=null && p!=null)
    {
        o.x := 99 ;
        int y := p.x ;
        if(o==p) {
            assert y == 99 ;
        }
    }

    // valid
    static void m7(Item[] a)
        requires(a!=null && #a>1 && (exists v,i: a : v!=null))
    {
        int k := 0 ;
        while (k<#a) {
           Item o := a[k] ;
           if(o != null) {
               o.x := 99 ;
           }
           k := k+1 ;
        }
        // collecting the values of o.x from o, to be inspected
        // in the post-cond:
        int[] values := new int[#a] ;
        k := 0 ;
        while (k<#a) {
           values[k] := -1 ;
           Item o := a[k] ;
           if(o != null) {
               int y := o.x ;
               values[k] := y ;
           }
           k := k+1 ;
        }
        assert (exists v,i: values : v == 99) ;
        // assert k < #a ;
    }

    static void m8(Item[] a, int i)
        requires(a!=null && 0<=i && i<#a && (forall v,j: a : v!=null))
    {
        // assume all elements are aliases
        int k := 0 ;
        Item o := a[0] ;
        while (k < #a) {
           Item p := a[k] ;
           assume p == o ;
           k := k+1 ;
        }
        k := #a ;
        while (0<k) {
           k := k - 1 ;
           Item p := a[k] ;
           p.set(k) ;
        }
        int j := 0 ;
        while (j < #a) {
           o := a[j] ;
           int val := o.x ;
           assert val == 0 ;
           j := j+1 ;
        }

        o := a[i] ;
        int val := o.x ;
        assert val == 0 ;
    }

}
