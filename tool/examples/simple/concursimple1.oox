//
// Containing some test programs exposing multi-threads executions
//

class Item {
    int x ;
    Item(int y) {
       this.x := y ;
    }
}

class Main {

    static void incr(Item o)
    {
         int x := o.x ;
         int xinit := x ;
         x := x+1 ;
         o.x := x ;
         x := o.x ;
         assert x == xinit + 1 ;
    }

    static void incrInvalid(Item o)
    {
         int x := o.x ;
         int xinit := x ;
         x := x+1 ;
         o.x := x ;
         x := o.x ;
         assert x == xinit ;
    }

    static void zf(Item o, int z) // set o.x to z
        requires(o != null)
    {
        int k := 0 ;
        while (k<2) {
           k := k+1 ;
           o.x :=  z ;
        }
    }

    static void mOne(int a) {
       Item o := new Item(a) ;
       Item p := new Item(a + 10) ;
       fork Main.incr(o) ;
       fork Main.incr(p) ;
       join ;
       int ox := o.x ;
       int px := p.x ;
       assert ox==a+1 && px==a+11 ;
    }

    static void mOneInvalidOne(int a) {
       Item o := new Item(a) ;
       Item p := new Item(a+10) ;
       fork Main.incr(o) ;
       fork Main.incr(p) ;
       join ;
       int ox := o.x ;
       int px := p.x ;
       assert ox!=a+1 ;
    }

    static void mOneInvalidTwo(int a) {
       Item o := new Item(a) ;
       Item p := new Item(a+10) ;
       fork Main.incr(o) ;
       fork Main.incr(p) ;
       join ;
       int ox := o.x ;
       int px := p.x ;
       assert px!=a+11 ;
    }

    static void mTwo(int y, int z)
      requires(y>=0 && y<z)
    {
       Item o := new Item(y) ;
       fork Main.zf(o,z) ;
       o.x := y+1 ;
       join ;
       int x := o.x ;
       assert x==y+1 || x==z ;
    }

    static void mTwoInvalidOne(int y, int z)
       requires(y>=0 && y<z)
    {
       Item o := new Item(y) ;
       fork Main.zf(o,z) ;
       o.x := y+1 ;
       join ;
       int x := o.x ;
       assert x==y+1  ;
    }

    static void mTwoInvalidTwo(int y, int z)
       requires(y>=0 && y<z)
    {
       Item o := new Item(y) ;
       fork Main.zf(o,z) ;
       o.x := y+1 ;
       join ;
       int x := o.x ;
       assert x==z  ;
    }

    static void mThree(int a) {
       int k := 0 ;
       int N := 4 ;
       Item[] items := new Item[N] ;
       while (k<N) {
           Item o := new Item(a+k) ;
           items[k] := o ;
           fork Main.incr(o) ;
           //Main.incr(o) ;
           k := k+1 ;
       }
       join ;
       k := 0 ;
       while (k<N) {
          Item o := items[k] ;
          int y := o.x ;
          assert y == a+k+1 ;
          k := k+1 ;
       }
    }

    static void mThreeInvalidOne(int a) {
       int k := 0 ;
       int N := 6 ;
       Item[] items := new Item[N] ;
       while (k<N) {
           Item o := new Item(a+k) ;
           items[k] := o ;
           fork Main.incr(o) ;
           //Main.incr(o) ;
           k := k+1 ;
       }
       join ;
       Item o := items[0] ;
       int y := o.x ;
       assert y == a ; // should be a+1
    }

    static void mThreeInvalidTwo(int a) {
       int k := 0 ;
       int N := 4 ;
       Item[] items := new Item[N] ;
       while (k<N) {
           Item o := new Item(a+k) ;
           items[k] := o ;
           fork Main.incr(o) ;
           //Main.incr(o) ;
           k := k+1 ;
       }
       join ;
       k := 0 ;
       Item o := items[N-1] ;
       int y := o.x ;
       assert y == N ; // should be N+a
    }

    static void mThreeInvalidThree(int a) {
       int k := 0 ;
       int N := 4 ;
       Item[] items := new Item[N] ;
       while (k<N) {
           Item o := new Item(a+k) ;
           items[k] := o ;
           fork Main.incr(o) ;
           //Main.incr(o) ;
           k := k+1 ;
       }
       join ;
       k := 0 ;
       Item o := items[2] ;
       int y := o.x ;
       assert y == 2 ; // should be 3+a
    }

    static void mFourInvalid(int N)
        requires(N==2)
    {
       int k := 0 ;
       N := 3 ;
       Item[] items := new Item[N] ;
       while (k<N) {
           Item o := new Item(k) ;
           items[k] := o ;
           fork Main.incr(o) ;
           //Main.incr(o) ;
           k := k+1 ;
       }
       join ;
       k := 0 ;
       Item o := items[N-1] ;
       int y := o.x ;
       assert y == N-1 ; // should be N
    }


    static void mFive(Item[] items)
        requires(items != null)
    {
       // assume the elements of the array are not null their
       // x fields are at least 0:
       int k := 0 ;
       while (k < #items) {
           Item o := items[k] ;
           int vx := o.x ;
           assume o != null && vx >= 0 ;
           k := k+1 ;
       }

       k := 0 ;
       while (k < #items) {
           Item o := items[k] ;
           fork Main.incr(o) ;
           // Main.incr(o) ;
           k := k+1 ;
       }
       join ;
       k := 0 ;
       while (k < #items) {
          Item o := items[k] ;
          int y := o.x ;
          assert y > 0  ;
          k := k+1 ;
       }
    }

}
